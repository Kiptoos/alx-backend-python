// Jenkins Pipeline for Django Messaging App
// Requires credentials in Jenkins:
//  - 'github-creds-id' (Username/Password or Token) for Git access
//  - 'dockerhub-creds-id' (Username/Password or Token) for Docker Hub
// Also ensure the Jenkins node has: docker, python3, and make available

pipeline {
  agent any
  options {
    ansiColor('xterm')
    timestamps()
  }
  parameters {
    string(name: 'GIT_URL', defaultValue: 'https://github.com/youruser/alx-backend-python.git', description: 'Repository URL')
    string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Branch to build')
    string(name: 'APP_DIR', defaultValue: 'messaging_app', description: 'Path to app in repo')
    string(name: 'DOCKER_IMAGE', defaultValue: 'yourdockerhubusername/messaging-app', description: 'Docker Hub image name')
  }
  environment {
    // Resolve and cache venv inside workspace
    VENV = "${WORKSPACE}/venv"
  }
  stages {
    stage('Checkout') {
      steps {
        script {
          checkout([$class: 'GitSCM',
            branches: [[name: "${params.GIT_BRANCH}"]],
            userRemoteConfigs: [[url: "${params.GIT_URL}", credentialsId: 'github-creds-id']]
          ])
        }
      }
    }
    stage('Install deps') {
      steps {
        dir("${params.APP_DIR}") {
          sh '''
            python3 -V
            python3 -m venv "${VENV}"
            . "${VENV}/bin/activate"
            pip install -U pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          '''
        }
      }
    }
    stage('Test (pytest)') {
      steps {
        dir("${params.APP_DIR}") {
          sh '''
            . "${VENV}/bin/activate"
            mkdir -p reports
            pytest --junitxml=reports/junit.xml                        --cov=. --cov-report=xml:reports/coverage.xml                        --cov-report=term-missing
          '''
        }
      }
      post {
        always {
          junit allowEmptyResults: true, testResults: "${params.APP_DIR}/reports/junit.xml"
          archiveArtifacts artifacts: "${params.APP_DIR}/reports/**", allowEmptyArchive: true
        }
      }
    }
    stage('Docker Build') {
      steps {
        dir("${params.APP_DIR}") {
          sh '''
            docker version
            docker build -t "${DOCKER_IMAGE}:${BUILD_NUMBER}" -t "${DOCKER_IMAGE}:latest" .
          '''
        }
      }
    }
    stage('Docker Push') {
      steps {
        withDockerRegistry([credentialsId: 'dockerhub-creds-id', url: '']) {
          sh '''
            docker push "${DOCKER_IMAGE}:${BUILD_NUMBER}"
            docker push "${DOCKER_IMAGE}:latest"
          '''
        }
      }
    }
  }
  post {
    success { echo '✅ Pipeline succeeded.' }
    failure { echo '❌ Pipeline failed.' }
    always  { echo "Build ${currentBuild.currentResult}" }
  }
}
