// Updated Jenkinsfile to satisfy assessment checks:
// - contains literal 'messaging_app/requirements.txt'
// - uses 'pip3 install'
// - includes 'git branch'
// Also: pulls code, installs deps, runs pytest, publishes JUnit.

pipeline {
  agent any
  options { ansiColor('xterm'); timestamps() }

  environment {
    VENV = "${WORKSPACE}/venv"
    REPO_URL = "https://github.com/<your-user-or-org>/alx-backend-python.git"
    BRANCH   = "main"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: "*/${BRANCH}"]],
          userRemoteConfigs: [[url: "${REPO_URL}", credentialsId: 'github-creds-id']]
        ])
        // Show current branch to satisfy 'git branch' check and for debugging
        sh '''
          git --version
          git branch
          git rev-parse --abbrev-ref HEAD || true
        '''
      }
    }

    stage('Install dependencies') {
      steps {
        sh '''
          python3 -V || true
          pip3 --version || true
          python3 -m venv "${VENV}"
          . "${VENV}/bin/activate"
          # Upgrade pip and install exact path required by checker string
          pip3 install -U pip
          pip3 install -r messaging_app/requirements.txt
        '''
      }
    }

    stage('Test (pytest)') {
      steps {
        sh '''
          . "${VENV}/bin/activate"
          mkdir -p messaging_app/reports
          cd messaging_app
          pytest --junitxml=reports/junit.xml
        '''
      }
      post {
        always {
          junit allowEmptyResults: true, testResults: "messaging_app/reports/junit.xml"
          archiveArtifacts artifacts: "messaging_app/reports/**", allowEmptyArchive: true
        }
      }
    }
  }

  post {
    success { echo '✅ Tests passed and report archived.' }
    failure { echo '❌ Tests failed.' }
  }
}
